#!/bin/bash

read -r -d '' USAGE <<"USAGEDOC"
pangrep - universal file content search

Usage:

    pangrep <pattern> <paths> <options>

Example:

    pangrep -i '\blorem\w+' -R . --include='*.pdf' --nice

This script is similar to grep, but can search in many type of files.
First, it converts the file to plain text, then runs grep on this plain text output.
You can use the same options as for grep, with minor exceptions.
File matching and recursion options will be handled by the script itself.
By default, extended regular expressions will be used.
There are additional options:
  - --type <type>`: sets an explicit input file type
  - `--nice`: appends `-n -C 3 --color=always` to grep options
USAGEDOC

if [ "$#" == '0' ] || { [ "$#" == '1' ] && { [ "$1" == '-h' ] || [ "$1" == '--help' ]; }; }; then
    printf '\n%s\n\n' "$USAGE"
    exit 0
fi

GREP_OPTS_WITH_PARAM='-e --regexp -f --file -m --max-count --label -A --after-context -B -before-context -C --context --group-separator --binary-files -D --devices -d --directories --exclude --exclude-from --exclude-dir --include'
GREP_OPTS_NICE='-n -C 3 --color=always'

function write() {
    printf '%s\n' "$1"
}

function escape_argument() {
    echo "'$( write "$1" | sed -E 's/'"'"'/'"'"'"'"'"'"'"'"'/g' )'"
}

function glob_match() {
    local glob="$1"
    local path="$2"
    
    local globRemaining="$glob"
    local pathRemaining="$path"
    while [[ "$globRemaining" != "" && "$pathRemaining" != "" ]]; do
        local globToken="$( basename "$globRemaining" )"
        local pathToken="$( basename "$pathRemaining" )"

        case "$pathToken" in
            $globToken) ;;
            *) return 1 ;;
        esac

        globRemaining="$( dirname "$globRemaining" )"
        if [ "$globRemaining" == '.' ]; then
            globRemaining=''
        fi
        pathRemaining="$( dirname "$pathRemaining" )"
        if [ "$pathRemaining" == '.' ]; then
            pathRemaining=''
        fi
    done

    if [ -n "$globRemaining" ]; then
        return 1
    fi

    return 0
}

function rule_match() {
    local path="$1"
    local includes="$2"
    local excludes="$3"
    
    local realPath="$( realpath "$path" )"
    
    local IFS=$'\n'
    
    for exclude in $excludes; do
        if glob_match "$exclude" "$realPath"; then
            return 1
        fi
    done
    
    local hasIncludes=''
    for include in $includes; do
        hasIncludes='1'
        if glob_match "$include" "$realPath"; then
            return 0
        fi
    done
    
    if [ -n "$hasIncludes" ]; then
        return 1
    fi
    
    if [ -f "$path" ]; then
        return 0
    else
        write "File not found: ${path}" >&2
        return 1
    fi
}

function detect_type() {
    local path="$1"
    
    local filename="$( basename -- "$path" )"
    local extension="${filename##*.}"
    if [ "$extension" != "$filename" ]; then
        write "$extension"
    fi
}

function calculate_type() {
    local explicitType="$1"
    local path="$2"
    
    if [ -n "$explicitType" ]; then
        write "$explicitType"
    else
        detect_type "$path"
    fi
}

function search_in_file() {
    local grepCommand="$1"
    local path="$2"
    local type="$3"
    local includes="$4"
    local excludes="$5"
    
    if ! rule_match "$path" "$includes" "$excludes"; then
        return 1
    fi
    
    local calculatedType="$( calculate_type "$type" "$path" )"
    local command=''
    if [ "$calculatedType" == 'pdf' ]; then
        command="pdftotext $( escape_argument "$path" ) - 2>/dev/null | ${grepCommand}"
    else
        additionalPandocParameters=""
        if [ -n "$type" ]; then
            additionalPandocParameters=" $( escape_argument "--from=${type}" )"
        fi
        command="pandoc $( escape_argument "$path" ) --to 'plain' ${additionalPandocParameters} | ${grepCommand}"
    fi
    
    local output="$( sh -c "$command" )"
    if [ -n "$output" ]; then
        write "--------- ${path}:"
        write ''
        write "$output"
        write ''
    fi
}

function search_in_directory() {
    local grepCommand="$1"
    local path="$2"
    local type="$3"
    local includes="$4"
    local excludes="$5"
    local doDereference="$6"
    
    local entries="$( ls -A "$path" )"
    local IFS=$'\n'
    for entry in $entries; do
        local subPath="${path}/${entry}"
        if [ -L "$subPath" ] && [ -z "$doDereference" ]; then
            continue
        fi
        if [ -f "$subPath" ]; then
            search_in_file "$grepCommand" "$subPath" "$type" "$includes" "$excludes"
        elif [ -d "$subPath" ]; then
            search_in_directory "$grepCommand" "$subPath" "$type" "$includes" "$excludes" "$doDereference"
        fi
    done
}

type=''
includes=''
excludes=''
grepOptionsString=''
searchString=''
searchStringFound=''
paths=''
isRecursive=''
isDereferenceRecursive=''
flavour='extended-regexp'
nextIsInclude=''
nextIsExclude=''
nextIsGrepParam=''
for arg in "$@"; do
    if [ -n "$nextIsInclude" ]; then
        includes="${includes}${arg}"$'\n'
        nextIsInclude='0'
    elif [ -n "$nextIsExclude" ]; then
        excludes="${excludes}${arg}"$'\n'
        nextIsExclude='0'
    elif [ -n "$nextIsGrepParam" ]; then
        grepOptionsString="${grepOptionsString} $( escape_argument "$arg" )"
        nextIsGrepParam='0'
    elif [ -n "$nextIsType" ]; then
        type="$arg"
        nextIsType='0'
    elif [ "$arg" == '-r' ] || [ "$arg" == '--recursive' ]; then
        isRecursive='1'
    elif [ "$arg" == '-R' ] || [ "$arg" == '--dereference-recursive' ]; then
        isRecursive='1'
        isDereferenceRecursive='1'
    elif [ "$arg" == '--include' ]; then
        nextIsInclude='1'
    elif [ "$arg" == '-E' ] || [ "$arg" == '--extended-regexp' ]; then
       flavour='extended-regexp'
    elif [ "$arg" == '-F' ] || [ "$arg" == '--fixed-strings' ]; then
       flavour='fixed-strings'
    elif [ "$arg" == '-G' ] || [ "$arg" == '--basic-regexp' ]; then
       flavour='basic-regexp'
    elif [ "$arg" == '-P' ] || [ "$arg" == '--perl-regexp' ]; then
       flavour='perl-regexp'
    elif [[ "$arg" =~ --include=(.*) ]]; then
        includes="${includes}${BASH_REMATCH[1]}"$'\n'
    elif [ "$arg" == '--exclude' ]; then
        nextIsExclude='1'
    elif [[ "$arg" =~ --exclude=(.*) ]]; then
        excludes="${excludes}${BASH_REMATCH[1]}"$'\n'
    elif [ "$arg" == '--color' ]; then
        grepOptionsString="${grepOptionsString} $( escape_argument '--color=always' )"
    elif [ "$arg" == '--type' ]; then
        nextIsType='1'
    elif [[ "$arg" =~ --type=(.*) ]]; then
        type="$arg"
    elif [ "$arg" == '--nice' ]; then
        grepOptionsString="${grepOptionsString} ${GREP_OPTS_NICE}"
    elif [[ "$arg" == -* ]]; then
        grepOptionsString="${grepOptionsString} $( escape_argument "$arg" )"
        if [[ " ${GREP_OPTS_WITH_PARAM} " =~ [[:space:]]$arg[[:space:]] ]]; then
            nextIsGrepParam='1'
        fi
    elif [ -z "$searchStringFound" ]; then
        searchString="$arg"
        searchStringFound='1'
    else
        paths="${paths}${arg}"$'\n'
    fi
done

grepCommand="grep $( escape_argument "$searchString" ) ${grepOptionsString} --${flavour}"

IFS=$'\n'
for path in $paths; do
    if [ -f "$path" ]; then
        search_in_file "$grepCommand" "$path" "$type" "$includes" "$excludes"
    elif [ -d "$path" ] && [ -n "$isRecursive" ]; then
        search_in_directory "$grepCommand" "$path" "$type" "$includes" "$excludes" "$isDereferenceRecursive"
    fi
done
